{"version":3,"sources":["getWeb3.js","App.jsx","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","givenProvider","eth","requestAccounts","on","alert","location","reload","console","log","provider","providers","HttpProvider","Workflow","this","props","workflowStatus","voterOwner","onClick","contract","methods","startProposalsRegistering","send","from","accounts","onWorkflowChange","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","startDapp","React","Component","ListVoterProp","addVoter","voterAddress","document","getElementById","value","match","voterListChange","addProposal","proposalDescription","onProposalChange","voteProposal","_param","hasVoted","setVote","onVoteChange","type","id","class","whitelist","map","a","rightVoter","list","push","i","voteList","length","toString","proposal","proposalList","prop","description","className","winningProposal","voterWhitelist","proposals","ParticipantAddr","state","balance","network","componentDidMount","getState","getBalance","address","result","getChainId","result_net","switchNetwork","utils","fromWei","setState","networkId","App","proposalCount","getAccounts","net","getId","deployedNetwork","VotingContract","networks","Contract","abi","error","call","winningProposalID","winnerId","getOneProposal","options","fromBlock","toBlock","getPastEvents","voterEventsList","voter","returnValues","owner","owner_addr","includes","votesEventsList","proposalId","proposalEventsList","changeWorkflowStatus","changeProposalList","changeVoteStatus","ReactDOM","render"],"mappings":"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","file":"static/js/main.3a8a7d5a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                // const web3 = new Web3(window.ethereum);\n                const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n                try {\n                    // Request account access if needed\n                    // await window.ethereum.enable();\n                    await web3.eth.requestAccounts();\n                    // Accounts now exposed\n                    resolve(web3);\n                    window.ethereum.on('disconnect',function(){\n                        alert(\"il faut se connecter\");\n                    });\n                    window.ethereum.on('accountsChanged',function(){\n                        window.location.reload();\n                    });\n                    window.ethereum.on('chainChanged',function(){\n                        window.location.reload();\n                    });\n\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport default getWeb3;","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass Workflow extends React.Component {\n\n   startDapp() {\n        \n        if (this.props.workflowStatus === '0') {\n            return <div>\n                Registering Voters\n            </div>\n        } else {\n            return <div>\n                Voters Registeration Ended\n            </div>\n        }\n    }\n\n    startProposalsRegistering() {\n\n        if (this.props.workflowStatus === '0' && this.props.voterOwner) {\n            return <div>\n            <button onClick={async () => {\n                await this.props.contract.methods.startProposalsRegistering().send({ from: this.props.accounts[0] });\n                this.props.onWorkflowChange()\n            }}>Start proposals registering</button>\n        </div>\n        } else {\n            return <div>\n                Proposals Registration Started\n            </div>\n        }\n    }\n\n\n    endProposalsRegistering() {\n        \n        if (this.props.workflowStatus === '1' && this.props.voterOwner) {\n            return <div>\n                <button onClick={async () => {\n                    await this.props.contract.methods.endProposalsRegistering().send({ from: this.props.accounts[0] });\n                    this.props.onWorkflowChange()\n                }}>End proposals registering</button>\n            </div>\n        } else {\n            return <div>\n                Proposals Registration Ended\n            </div>\n        }\n    }\n\n    startVotingSession() {\n        \n        if (this.props.workflowStatus === '2' && this.props.voterOwner) {\n            return <div>\n                <button onClick={async () => {\n                    await this.props.contract.methods.startVotingSession().send({ from: this.props.accounts[0] });\n                    this.props.onWorkflowChange()\n                }}>Start voting session</button>\n            </div>\n        } else {\n            return <div>\n                Voting Session Started\n            </div>\n        }\n    }\n\n    endVotingSession() {\n       \n        if (this.props.workflowStatus === '3' && this.props.voterOwner) {\n            return <div>\n                <button onClick={async () => {\n                    await this.props.contract.methods.endVotingSession().send({ from: this.props.accounts[0] });\n                    this.props.onWorkflowChange()\n                }}>End voting session</button>\n            </div>\n        } else {\n            return <div>\n                Voting Session Ended\n            </div>\n        }\n    }\n\n    tallyVotes() {\n        \n        if (this.props.workflowStatus === '4' && this.props.voterOwner) {\n            return <div>\n                <button onClick={async () => {\n                    await this.props.contract.methods.tallyVotes().send({ from: this.props.accounts[0] });\n                    this.props.onWorkflowChange()\n                }}>Tally votes</button>\n            </div>\n        } else {\n            return <div>\n                Votes Tallied\n            </div>\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                { this.startDapp() }\n                { this.startProposalsRegistering() }\n                { this.endProposalsRegistering() }\n                { this.startVotingSession() }\n                { this.endVotingSession() }\n                { this.tallyVotes() }\n            </div>\n        )\n    }\n}\n\n\nclass ListVoterProp extends React.Component {\n\n    addVoter = async () => {\n        let voterAddress = document.getElementById(\"addVoterButton\").value;\n        if (voterAddress.match(/^0x[a-fA-F0-9]{40}$/)) {\n            await this.props.contract.methods.addVoter(voterAddress).send({from: this.props.accounts[0]});\n            await this.props.voterListChange();\n        } \n        document.getElementById('addVoterButton').value = \"\";\n    };\n\n    addProposal = async () => {\n        let proposalDescription = document.getElementById(\"addPropButton\").value;\n        if (proposalDescription.match(/.*\\S.*/)) {\n            await this.props.contract.methods.addProposal(proposalDescription).send({ from: this.props.accounts[0] });\n            await this.props.onProposalChange();\n        } \n        document.getElementById('addPropButton').value = \"\";\n    };\n\n\n\n    voterWhitelist() {\n        if(this.props.voterOwner) {\n            if (this.props.workflowStatus === '0') {\n                return <div>\n                    <h3>Voter whitelist : </h3>\n                    <input type=\"text\" id=\"addVoterButton\"/>\n                    <button class=\"button\" onClick={this.addVoter}>Add on Whitelist</button>\n                    <p>There is the Voter whitelist :</p>\n                    <table>\n                        <tbody>\n                        {this.props.whitelist.map((a) => (\n                            <tr key={a}><td>{a}</td></tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            } else {\n                return <div>\n                    <h3>Voter whitelist : </h3>\n                    <p>You can't add voter at this step.</p>\n                    <p>There is the Voter whitelist :</p>\n                    <table>\n                        <tbody>\n                        {this.props.whitelist.map((a) => (\n                            <tr key={a}><td>{a}</td></tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            }\n        }\n        if(this.props.rightVoter && this.props.workflowStatus === '5') {\n                const list = [];\n                list.push(<tr><td>Voter address</td><td>vote</td></tr>);\n                for (let i = 0; i < this.props.voteList.length; i++) {\n                    list.push(<tr>\n                        <td>{this.props.voteList[i].voterAddress.toString()}</td>\n                        <td>{this.props.voteList[i].proposal.toString()}</td>\n                    </tr>);\n                }\n                return <div>\n                    <p>List of voters.</p>\n                    <table>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                <p>You have been registered.</p>\n                </div>\n        } else {\n            return <p>You are not registered.</p>\n        }\n    }\n\n    voteProposal = async (_param) => {\n        if (!this.props.hasVoted) {\n            await this.props.contract.methods.setVote(_param).send({ from: this.props.accounts[0] });\n            await this.props.onVoteChange();\n        }\n    };\n\n    proposals () {\n        const proposalList =\n        <table>\n            <tbody>\n            {this.props.proposalList.map((prop) => (\n                <tr>\n                    <td>{prop.description}</td>\n                </tr>\n            ))}\n            </tbody>\n        </table>;\n\n        if (!this.props.rightVoter) {\n            return <div>\n                <p>You are not registered yet, if you want to participate, you have to be registered</p>\n            </div>\n        } else {\n            if (this.props.workflowStatus === '0' || this.props.workflowStatus === '1' || this.props.workflowStatus === '2') {\n                return <div>\n                    <p>You are registered, the vote session has not started. </p>\n                    {proposalList}\n                </div>\n            }\n            if(this.props.workflowStatus === '0') {\n                return <div>\n                    <p>The proposal registration has not started yet.</p>\n                </div>\n            } else if (this.props.workflowStatus === '1') {\n                return <div>\n                    <input type=\"text\" id=\"addPropButton\"/>\n                    <button className=\"button\" onClick={this.addProposal}>Add proposal</button>\n                </div>\n            } else if (this.props.workflowStatus === '2') {\n                return <div>\n                    <p>The proposal registration has Ended.</p>\n                </div>\n            } else if (this.props.workflowStatus === '3' && !this.props.hasVoted) {\n                return <div>\n                    <p>The vote session is open.</p>\n                </div>\n            } else if (this.props.workflowStatus === '3' && this.props.hasVoted) {\n                if (this.props.hasVoted) {\n                    return <div>\n                        <p>You are registered and have already voted. </p>\n                        {proposalList}\n                    </div>\n                } else {\n                    const list = [];\n                    for (let i = 0; i < this.props.proposalList.length; i++) {\n                        list.push(\n                            <tr><td>{this.props.proposalList[i].description}</td>\n                                <td><button className=\"button\" onClick={() => this.voteProposal(i)}>Vote for this proposal</button></td></tr>\n                        );\n                    }\n                    return <table>\n                        <tbody>\n                        {list}\n                        </tbody>\n                    </table>\n                }\n            } \n            else if (this.props.workflowStatus === '4') {\n                return <div>\n                    <p>The vote session has ended.</p>\n                </div>\n            }\n\n            if (this.props.workflowStatus === '5') {\n                return <div>\n                    <p>The vote has ended. The proposal with the most votes is : </p>\n                    <span>\n                        {this.props.winningProposal}\n                    </span>\n                </div>\n            }\n        }\n\n    };\n\n    render(){\n        return(\n            <>\n            <div>\n                <h3>Whitelist Status</h3>\n                { this.voterWhitelist() }\n            </div>\n            <div>\n                <h3>Proposals</h3>\n                { this.proposals() }\n            </div>\n            </>\n        )\n    }\n}\n\n\nclass ParticipantAddr extends React.Component {\n\n    state = {\n        balance: null,\n        network: null\n    };\n\n    componentDidMount = async () => {\n        this.getState();\n    };\n\n    async getState() {\n        const result = await this.props.web3.eth.getBalance(this.props.address.toString());\n        const result_net = await this.props.web3.eth.getChainId();\n        const network = this.switchNetwork(result_net.toString());\n\n        let balance = this.props.web3.utils.fromWei(result, \"ether\") + \" eth\";\n\n        this.setState({ balance });\n        this.setState({ network });\n    }\n\n    switchNetwork(networkId) {\n        switch (networkId) {\n            case '1' :\n                return 'Ethereum Mainnet';\n            case '3' :\n                return 'Ropsten';\n            case '1337' :\n                return 'LocalHost';\n            default:\n                return 'Not a Network';\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <h3> The voting Dapp </h3>\n            <div id='addressBalance'>\n                    Network: {this.state.network}\n                <br></br>\n                    Address: {this.props.address.toString()} \n                <br></br>\n                    Balance: {this.state.balance}               \n            </div>\n            </>\n        )\n    }\n}\n\n\n\nclass App extends Component {\n    state = {\n        web3: null,\n        accounts: null,\n        contract: null,\n        workflowStatus: null,\n        voterOwner: null,\n        rightVoter: null,\n        hasVoted: null,\n        whitelist: [],\n        proposalList: [],\n        voteList: [],\n        proposalCount: 0,\n        winningProposal: null\n    };    \n\n    componentDidMount = async () => {\n        try {\n           // await this.initWeb3();\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = VotingContract.networks[networkId];\n            const contract = new web3.eth.Contract(\n                VotingContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n            \n            this.setState({ web3, accounts, contract });\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n\n        const workflowStatus = await this.state.contract.methods.workflowStatus().call({ from: this.state.accounts[0] });\n        this.setState({ workflowStatus });\n        if (workflowStatus === '5') {\n            const winnerId = await this.state.contract.methods.winningProposalID().call({ from: this.state.accounts[0] });\n            const winningProposal = await this.state.contract.methods.getOneProposal(winnerId).call({ from: this.state.accounts[0] });\n            this.setState({ winningProposal: winningProposal.description });\n        }\n\n        let options = {\n            fromBlock: 0,\n            toBlock: 'latest'\n        };\n        let voterEventsList = await this.state.contract.getPastEvents('VoterRegistered', options);\n        const whitelist = [];\n        voterEventsList.map( (voter) => (\n            whitelist.push(voter.returnValues.voterAddress.toString())\n        ));\n        this.setState({ whitelist });\n\n        \n        const owner_addr = await this.state.contract.methods.owner().call();\n        const voterOwner = (this.state.accounts.toString() === owner_addr);\n        this.setState({ voterOwner });\n        this.setState({ owner_addr });\n\n        const rightVoter = this.state.whitelist.includes(this.state.accounts.toString());\n        this.setState({ rightVoter });\n\n    \n        let votesEventsList = await this.state.contract.getPastEvents('Voted', options);\n        let hasVoted = false;\n        let voteList = [];\n        for (let i = 0; i < votesEventsList.length; i++) {\n            if (votesEventsList[i].returnValues.voter.toString() === this.state.accounts[0]) {\n                hasVoted = true;\n            }\n            const proposalId = votesEventsList[i].returnValues.proposalId.toString()\n            const proposal = await this.state.contract.methods.getOneProposal(proposalId).call({from: this.state.accounts[0]});\n            voteList.push({\n                voterAddress : votesEventsList[i].returnValues.voter.toString(),\n                proposal : proposal.description\n            })\n        }\n        this.setState({hasVoted, voteList});\n\n        if (this.state.rightVoter) {\n            let options = {\n                fromBlock: 0,\n                toBlock: 'latest'\n            };\n            let proposalEventsList = await this.state.contract.getPastEvents('ProposalRegistered', options);\n            let proposalCount = proposalEventsList.length;\n            this.setState({ proposalCount });\n            const proposalList = [];\n            for (let i = 0; i < this.state.proposalCount; i++) {\n                const result = await this.state.contract.methods.getOneProposal(i).call({from: this.state.accounts[0]});\n                proposalList.push(result);\n            }\n            this.setState({ proposalList });\n        }\n    };\n\n\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        \n        return (\n            <div className=\"App\">\n                <div id='header'>\n                    <ParticipantAddr\n                        address={this.state.accounts}\n                        web3={this.state.web3}\n                    />\n                </div>\n                <Workflow\n                    workflowStatus={this.state.workflowStatus}\n                    accounts={this.state.accounts}\n                    contract={this.state.contract}\n                    voterOwner={this.state.voterOwner}\n                    onWorkflowChange={this.changeWorkflowStatus}\n                />\n                <div id='container'>\n                    <ListVoterProp\n                        workflowStatus={this.state.workflowStatus}\n                        accounts={this.state.accounts}\n                        contract={this.state.contract}\n                        voterOwner={this.state.voterOwner}\n                        rightVoter={this.state.rightVoter}\n                        whitelist={this.state.whitelist}\n                        voteList={this.state.voteList}\n                        voterListChange={this.voterListChange}\n                        hasVoted={this.state.hasVoted}\n                        proposalList={this.state.proposalList}\n                        winningProposal={this.state.winningProposal}\n                        onProposalChange={this.changeProposalList}\n                        onVoteChange={this.changeVoteStatus}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}